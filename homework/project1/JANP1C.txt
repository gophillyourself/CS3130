---Part C Driver---
#include <iostream>
#include <chrono>
#include "fibonnaci.h"
#include <sys/time.h>

long double nth = 0;

using namespace std;
using namespace std::chrono;

int main(int argc, char** argv) {
    string arg = argv[1];
    nth = stod(argv[1]);

    std::chrono::time_point<std::chrono::system_clock> now = std::chrono::system_clock::now();

    cout<<"Fibonacci to the "<<nth<<" term"<<endl;
    auto start = std::chrono::high_resolution_clock::now();
    long double fibRecOutput = fib(nth);
    auto finish = std::chrono::high_resolution_clock::now();
    long double fibRecDuration = std::chrono::duration_cast<std::chrono::nanoseconds>(finish-start).count();

    start = std::chrono::high_resolution_clock::now();
    long double fibIterOutput = fibIter(nth);
    finish = std::chrono::high_resolution_clock::now();
    long double fibIterDuration = std::chrono::duration_cast<std::chrono::nanoseconds>(finish-start).count();

    cout<<"fibRec = "<<fibRecOutput<<" Calculated Recursively in (nanoseconds) = "<<fibRecDuration<<endl;
    cout<<"fibIt = "<<fibIterOutput<<" Calculated Iteratively in (nanoseconds) = "<<fibIterDuration<<endl;
    return 0;
}



---Fibonnaci Header---


#ifndef FIBONACCI_H
#define FIBONACCI_H

long double fib(long double n);
long double fibIter(long double nth);

#endif

---Fibonnaci Implementation---
#include <iostream>
#include "fibonnaci.h"

using namespace std;

long double fib(long double n) {
    if(n <= 2) {
        return 1;
    } else {
        return fib(n-1) + fib(n-2);
    }
}

long double fibIter(long double nth) {
    double counter = 1;
    long double current = 1;
    long double last = 0;
    long double temp = 0;
    while(counter != nth) {
        temp = current;
        current = current + last;
        last = temp;
        counter++;
    }
    return current;
}

---Part C Output---


Fibonacci to the 5 term
fibRec = 5 Calculated Recursively in (nanoseconds) = 340
fibIt = 5 Calculated Iteratively in (nanoseconds) = 118
Fibonacci to the 10 term
fibRec = 55 Calculated Recursively in (nanoseconds) = 1563
fibIt = 55 Calculated Iteratively in (nanoseconds) = 162
Fibonacci to the 20 term
fibRec = 6765 Calculated Recursively in (nanoseconds) = 115665
fibIt = 6765 Calculated Iteratively in (nanoseconds) = 254
Fibonacci to the 40 term
fibRec = 1.02334e+08 Calculated Recursively in (nanoseconds) = 1.6399e+09
fibIt = 1.02334e+08 Calculated Iteratively in (nanoseconds) = 395
Fibonacci to the 45 term
fibRec = 1.1349e+09 Calculated Recursively in (nanoseconds) = 1.85415e+10
fibIt = 1.1349e+09 Calculated Iteratively in (nanoseconds) = 414
