---Part A Driver---
#include <iostream>
#include <chrono>
#include "fibonnaci.h"

double counter = 0;
double nth = 0;

using namespace std;
using namespace std::chrono;

int main(int argc, char** argv) {
    string arg = argv[1];
    nth = stod(argv[1]);
    cout<<"Iterative fibonacci"<<endl;
    cout<<"Fibonacci "<<nth<<endl;
    cout<<"fibIter = "<<fibIter(nth)<<endl;
    return 0;
}



---Fibonnaci Header---


#ifndef FIBONACCI_H
#define FIBONACCI_H

double fibRec(double nth, double counter, double current, double last);
double fibIter(double nth);

#endif

---Fibonnaci Implementation---
#include <iostream>
#include "fibonnaci.h"
using namespace std;

double fibRec(double nth, double counter, double current, double last) {
    if(counter == nth) {
        return current;
    }
    counter++;
    return fibRec(nth, counter, current + last, current);
}

double fibIter(double nth) {
    int counter = 1;
    double current = 1;
    double last = 0;
    double temp = 0;
    while(counter != nth) {
        temp = current;
        current = current + last;
        last = temp;
        counter++;
    }
    return current;
}

---Part B Output---


Iterative fibonacci
Fibonacci 100
fibIter = 3.54225e+20
